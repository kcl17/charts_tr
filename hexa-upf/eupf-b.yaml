---

image:
  registry: docker.io
  repository: khushichhillar
  name: eupf
  tag: "v2.0.0" # tag should be v2.0.1
  pullPolicy: Always

deploymentStrategy:
  type: Recreate

command:
  - /bin/sh
  - -c
  - |
      set -x ; \
      echo -e "interface_name: [access, core]\napi_address: :8080\npfcp_address: PFCP_ADDRESS:8805\nmetrics_address: :9090\nn3_address: 192.168.252.3" > /etc/appconfig.yml; \
      export PFCP_IP=$(hostname -i); \
      sed -i "s/PFCP_ADDRESS:8805/${PFCP_IP}:8805/g" /etc/appconfig.yml; \
      mkdir /etc/iproute2 ; echo "111 fromn3gtp" >> /etc/iproute2/rt_tables ; \
      ip rule add from 172.250.0.0/16 lookup fromn3gtp; \
      ip route add default via 10.42.0.1 dev eth0 table fromn3gtp ;\
      sysctl -w net.ipv4.ip_forward=1  # to overcome the problem of switched off net.ipv4.ip_forward appearing in some environments ;\
      /app/bin/eupf $0 $@

args:
  - --config
  - /etc/appconfig.yml

securityContext:
  privileged: true

podSecurityContext:
  sysctls:
  - name: net.ipv4.ip_forward
    value: "1"
  - name: net.ipv6.conf.all.forwarding
    value: "1"

configMaps:
  config:
    data:
      config.yml: |
        interface_name: [access, eth0, core]
        api_address: :8080
        pfcp_address: PFCP_ADDRESS:8805
        metrics_address: :9090
        n3_address: 192.168.252.3

env:
  UPF_PFCP_NODE_ID: 192.168.250.3  # address on n4 interface
  # UPF_N3_ADDRESS: 10.100.50.233

volumes:
  - name: sys
    hostPath:
      path: /sys
  - name: config
    configMap:
      name: hexa-upf-config

volumeMounts:
  - name: sys
    mountPath: /sys
    readOnly:  true
  - name: config
    mountPath: /app/conf

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    additionalLabels:
      release: kube-prometheus-stack
    endpoints:
      port: metrics
      path: "/metrics"

extraContainerPorts:
  - name: pfcp
    containerPort: 8805
    protocol: UDP
  - name: metrics
    containerPort: 9090
    protocol: TCP

service:
  type: ClusterIP
  port: 8080
  extraPorts:
    - port: 8805
      targetPort: pfcp
      protocol: UDP
      name: pfcp
    - port: 9090
      targetPort: metrics
      protocol: TCP
      name: metrics

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

livenessProbe:
  tcpSocket:
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10

readinessProbe:
  tcpSocket:
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10

podAnnotations:
  k8s.v1.cni.cncf.io/networks: |
    [
      { "name": "access-net",
        "interface": "access",
        "ips": [ "192.168.252.3/24" ],
        "mac": "d6:a4:06:a6:45:6f",
        "dns": {}
      },
      { "name": "core-net",
        "interface": "core",
        "ips": [ "192.168.250.3/24" ],
        "mac": "f6:2b:4f:38:e8:49",
        "dns": {}
      }
    ]

extraDeploy:
#   - apiVersion: k8s.cni.cncf.io/v1
#     kind: NetworkAttachmentDefinition
#     metadata:
#       name: n3network-upf
#     spec:
#       config: |
#         {
#           "cniVersion": "0.3.1",
#           "plugins": [
#             {
#               "type": "ipvlan",
#               "capabilities": { "ips": true },
#               "master": "eth0",
#               "mode": "l2",
#               "ipam": {
#                 "type": "static"
#               }
#             }
#           ]
#         }
#   - apiVersion: k8s.cni.cncf.io/v1
#     kind: NetworkAttachmentDefinition
#     metadata:
#       name: n4network-upf
#     spec:
#       config: |
#         {
#           "cniVersion": "0.3.1",
#           "plugins": [
#             {
#               "type": "ipvlan",
#               "capabilities": { "ips": true },
#               "master": "eth0",
#               "mode": "l2",
#               "ipam": {
#                 "type": "static"
#               }
#             }
#           ]
#         }
#   - apiVersion: k8s.cni.cncf.io/v1
#     kind: NetworkAttachmentDefinition
#     metadata:
#       name: n6ptp-upf
#     spec:
#       config: |
#         {
#           "cniVersion": "0.3.1",
#           "plugins": [
#             {
#               "type": "ptp",
#               "capabilities": { "ips": true },
#               "ipam": {
#                 "type": "host-local",
#                 "ranges": [
#                     [
#                         {
#                             "subnet": "10.100.100.0/24",
#                             "gateway": "10.100.100.1"
#                         }
#                     ]
#                 ],
#                 "routes": [
#                   { "dst": "8.0.0.0/8" }
#                 ]
#               }
#             }
#           ]
#         }

  - apiVersion: batch/v1
    kind: Job
    metadata:
      name: rout4eupf
      # labels:
        # app: rout4eupf  # Deployment labels to match with replicaset labels and pods labels
    spec:
      # selector:
        # matchLabels:
          # app: rout4eupf # Replicaset to manage pods with labels
      template:
        # metadata:
          # labels:
            # app: rout4eupf  # Pods labels
        spec:
          hostNetwork: true
          restartPolicy: Never
          volumes:
          - name: shared-data
            emptyDir: {}
          initContainers:
          - name: set-pod-ip
            image: alpine:3.17.3
            command: ["/bin/sh", "-c", "hostname -i > /etc/podip/pod_ip"]
            volumeMounts:
            - name: shared-data
              mountPath: /etc/podip
          containers:
            - name: iprouteadd
              volumeMounts:
                - name: shared-data
                  mountPath: /etc/podip
              env:
              # - name: UPF_POD_IP
              #   value: "10.100.100.12"  #addr at n6 in eupf pod
              - name: UPF_POOLS_CIDR
                value: "172.250.0.0/16"    # {{ .Values.global.uesubnet }} in towards5gs-helm
              image: alpine:3.17.3
              imagePullPolicy: IfNotPresent
              resources: {}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                privileged: true
                runAsNonRoot: false
              command:
              - /bin/sh
              - -c
              - |
                  UPF_POD_IP=$(cat /etc/podip/pod_ip)
                  echo "Pod IP is $UPF_POD_IP"
                  echo "start script"; set -x ;\
                  i=0; DEVNAME_PTP=""; \
                  while [ -z "$DEVNAME_PTP" ]; \
                  do \
                    echo "$i: wait 1 sec for DEVNAME_PTP"; sleep 1; \
                    DEVNAME_PTP=$(ip route list ${UPF_POD_IP} | awk '{print $3}'); \
                    i=$((i+1)); \
                  done ;\
                  ip route add ${UPF_POOLS_CIDR} via ${UPF_POD_IP} dev ${DEVNAME_PTP} onlink ;\
                  if [ $? = 0 ]; then \
                      echo "OK";  \
                  else \
                      echo "If ERR is File exists, possible it's OK, route already created.";  \
                  fi
